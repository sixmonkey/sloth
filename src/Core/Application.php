<?php

namespace Sloth\Core;

use function array_key_exists;
use function data_get;
use const DB_PREFIX;
use const DIRECTORY_SEPARATOR;
use function file_get_contents;
use function get_class;
use Illuminate\Container\Container;
use Illuminate\Support\Str;

class Application extends Container
{
    /**
     * Application version.
     *
     * @var string
     */
    const VERSION = '0.0.6';

    /**
     * The loaded service providers.
     *
     * @var array
     */
    protected $loadedProviders = [];

    /**
     * @var string
     */
    protected $namespace;

    /**
     * Project paths.
     * Same as $GLOBALS['sloth.paths'].
     *
     * @var array
     */
    protected $paths = [];

    /**
     * Create a new sloth application instance.
     *
     * @param string|null $basePath
     */
    public function __construct($basePath = null)
    {
        if ($basePath) {
            $this->setBasePath($basePath);
        }
        $this->registerBasebindings();
        $this->registerBaseServiceProviders();
        $this->registerCoreContainerAliases();

        /**
         * open database connection for corcel
         */
        $this->connectCorcel();
    }

    /**
     * adds a filepath to our container
     *
     * @param $key
     * @param $path
     */
    public function addPath($key, $path)
    {
        $this->instance('path.' . $key, $path);
    }

    /**
     * Get the base path of the sloth installation.
     *
     * @param string $path Optional path to append to the base path.
     *
     * @return string
     */
    public function basePath($path = '')
    {
        return $this->basePath . ($path ? DIRECTORY_SEPARATOR . $path : $path);
    }

    /**
     * calls a module
     *
     * @param $name
     * @param $data
     * @param $options
     */
	public function callModule( $name, $data = [], $options = [] ) {
		$module_name = 'Theme\Module\\' . Str::camel( str_replace( '-',
				'_',
				$name ) ) . 'Module';
		$myModule    = new $module_name( $options );
		foreach ( $data as $k => $v ) {
			$myModule->set( $k, $v );
		}
		return $myModule->render();
	}

        return $myModule->render();
    }

    /**
     * Return the application namespace.
     *
     * @throws \RuntimeException
     *
     * @return string
     */
    public function getNamespace()
    {
        if (! is_null($this->namespace)) {
            return $this->namespace;
        }

        $composer = json_decode(file_get_contents($this->basePath('composer.json')), true);

        foreach ((array) data_get($composer, 'autoload.psr-4') as $namespace => $path) {
            foreach ((array) $path as $pathChoice) {
                if (realpath($this->path()) == realpath($this->basePath($pathChoice))) {
                    return $this->namespace = $namespace;
                }
            }
        }

        throw new \RuntimeException('Unable to detect application namespace.');
    }

    /**
     * @TODO: That's incredibly hackish! Look at Illuminate\Container\Container::resolve
     *
     * @param string $abstract
     * @param array  $parameters
     *
     * @return mixed
     */
    public function makeWith($abstract, array $parameters = [])
    {
        if ($abstract == 'Illuminate\Pagination\LengthAwarePaginator') {
            $abstract = 'Sloth\Pagination\Paginator';
        }

        return parent::makeWith($abstract, $parameters); // TODO: Change the autogenerated stub
    }

    /**
     * Get the path to the application "sloth-application" directory.
     *
     * @param string $path
     *
     * @return string
     */
    public function path($path = '')
    {
        return $this->basePath . DIRECTORY_SEPARATOR . 'app' . ($path ? DIRECTORY_SEPARATOR . $path : $path);
    }

    /**
     * Register a service provider with the application.
     *
     * @param \Sloth\Core\ServiceProvider|string $provider
     * @param array                              $options
     * @param bool                               $force
     *
     * @return \Sloth\Core\ServiceProvider
     */
    public function register($provider, array $options = [], $force = false)
    {
        if (! $provider instanceof ServiceProvider) {
            $provider = new $provider($this);
        }
        if (array_key_exists($providerName = get_class($provider), $this->loadedProviders)) {
            return;
        }

        $this->loadedProviders[$providerName] = true;
        $provider->register();

        if (method_exists($provider, 'boot')) {
            $provider->boot();
        }
    }

    /**
     * Set the base path for the application.
     *
     * @param string $basePath
     *
     * @return \Themosis\Core\Application
     */
    public function setBasePath($basePath)
    {
        $this->basePath = rtrim($basePath, '\/');

        return $this;
    }


    /**
     * Get the version number of the application.
     *
     * @return string
     */
    public function version()
    {
        return static::VERSION;
    }

    /**
     * Register basic bindings into the container.
     */
    protected function registerBasebindings()
    {
        static::setInstance($this);
        $this->instance('app', $this);
        $this->instance(Container::class, $this);
    }

    /**
     * Register base service providers.
     */
    protected function registerBaseServiceProviders()
    {
        $this->register(new EventServiceProvider($this));
        $this->register(new LogServiceProvider($this));
        $this->register(new RouteServiceProvider($this));
    }

    /**
     * Register the core class aliases in the container.
     */
    protected function registerCoreContainerAliases()
    {
        $list = [
            'app'    => [
                \Sloth\Core\Application::class,
                \Illuminate\Contracts\Container\Container::class,
                \Illuminate\Contracts\Foundation\Application::class,
                \Psr\Container\ContainerInterface::class,
            ],
            'events' => [
                \Illuminate\Events\Dispatcher::class,
                \Illuminate\Contracts\Events\Dispatcher::class,
            ],
        ];

        foreach ($list as $key => $aliases) {
            foreach ($aliases as $alias) {
                $this->alias($key, $alias);
            }
        }
    }

    /**
     *
     */
    private function connectCorcel()
    {
        $params = [
            'host'     => DB_HOST,
            'database' => DB_NAME,
            'username' => DB_USER,
            'password' => DB_PASSWORD,
            'prefix'   => DB_PREFIX // default prefix is 'wp_', you can change to your own prefix
        ];
        \Corcel\Database::connect($params);
    }
}
